name: Build the imageüì¶

on:
  workflow_dispatch:
  # schedule:
  # - cron: "00 12 1 * *"
  # push:
  #   branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_CONTENT_TRUST: 1
  DOCKER_BUILD_RECORD_UPLOAD: false
  DOCKER_BUILDKIT: 1

jobs:
  build:
    if: github.actor == 'ammnt'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
      attestations: write

    steps:
      - name: Checkout repositoryüß±
        uses: actions/checkout@v5.0.0

      - name: Load .env variables‚òÅÔ∏è
        run: |
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env
          echo "BUILD_DATE=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Install cosignüîí
        uses: sigstore/cosign-installer@v4.0.0
        with:
          cosign-release: "v3.0.2"

      - name: Setup Docker buildxüõ†Ô∏è
        uses: docker/setup-buildx-action@v3.11.1
        with:
          version: v0.29.1
          driver-opts: image=moby/buildkit:v0.25.1-rootless

      - name: Log into GHCRüîë
        uses: docker/login-action@v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hubüîë
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadataüî¨
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            description="Distroless NGINX with HTTP/3, QUIC and PQC supportüöÄ"
            maintainer="ammnt <admin@msftcnsi.com>"
            org.opencontainers.image.description="Distroless NGINX with HTTP/3, QUIC and PQC supportüöÄ"
            org.opencontainers.image.authors="ammnt, admin@msftcnsi.com"
            org.opencontainers.image.title="Distroless NGINX with HTTP/3, QUIC and PQC supportüöÄ"
            org.opencontainers.image.source="https://github.com/ammnt/nginx/"
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.documentation="https://github.com/ammnt/nginx/blob/main/README.md"
            org.opencontainers.image.licenses="BSD-2-Clause License"
            org.opencontainers.image.url="https://msftcnsi.com"
            org.opencontainers.image.version=${{ env.APP_VERSION }}

      - name: Build the Docker image‚õìÔ∏è
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          provenance: false
          context: .
          file: ./Dockerfile.template
          platforms: linux/amd64
          load: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_VERSION=${{ env.BASE_VERSION }}
            BASE_HASH=${{ env.BASE_HASH }}
            OPENSSL_VERSION=${{ env.OPENSSL_VERSION }}
            APP_VERSION=${{ env.APP_VERSION }}
            NJS_VERSION=${{ env.NJS_VERSION }}
            PCRE_VERSION=${{ env.PCRE_VERSION }}
            ZLIB_VERSION=${{ env.ZLIB_VERSION }}

      - name: Slim the Docker imageüöÄ
        id: slim
        uses: kitabisa/docker-slim-action@v1.2.0
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          tag: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          overwrite: true
          version: 1.41.7
          args: >-
            --preserve-path /usr/bin/nc
            --include-path /usr/bin/nc
            --preserve-path /usr/lib/libmd.so.0
            --include-path /usr/lib/libmd.so.0
            --preserve-path /usr/lib/libbsd.so.0
            --include-path /usr/lib/libbsd.so.0

      - name: Analyze image with Docker Scoutüíä
        uses: docker/scout-action@v1.18.2
        with:
          command: cves,sbom
          image: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          sarif-file: ${{ github.workspace }}/scout.report.json
          summary: false

      - name: Analyze image with Trivyüíä
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          scan-type: image
          format: "json"
          output: "${{ github.workspace }}/trivy.report.json"
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
          github-pat: ${{ secrets.GH_TOKEN }}

      - name: Analyze image with Grypeüíä
        id: anchore
        uses: anchore/scan-action@v7.0.0
        with:
          image: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          fail-build: false
          severity-cutoff: critical
          output-format: json
          grype-version: v0.102.0
          output-file: ${{ github.workspace }}/grype.report.json

      - name: Analyze image with Snyküíä
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          sarif: false
          json: true

      - name: Analyze image with Dockleüíä
        uses: goodwithtech/dockle-action@main
        with:
          image: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          format: "json"
          output: "dockle.report.json"
          exit-code: "1"
          exit-level: "warn"
          ignore: "CIS-DI-0010"

      - name: Analyze image with Syftüíä
        uses: anchore/sbom-action@v0.20.6
        with:
          syft-version: v1.36.0
          image: ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          format: spdx-json
          output-file: ${{ github.workspace }}/syft.report.json
          upload-artifact: false

      - name: Explore the Docker image and test with Diveüîç
        timeout-minutes: 2
        env:
          CI: true
        run: |
          wget -q https://github.com/wagoodman/dive/releases/download/v0.13.1/dive_0.13.1_linux_amd64.tar.gz
          tar xvzf dive_0.13.1_linux_amd64.tar.gz -C /usr/local/bin
          dive --ci-config "${{ github.workspace }}/.dive-ci/" ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          docker run -d --name nginx --rm -p 127.0.0.1:8080:8080/tcp ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          curl -v http://127.0.0.1:8080 || exit 1
          pwd ; ls -la

      - name: Upload all reportsüìä
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-reports
          path: |
            ${{ github.workspace }}/*.report.json
            ${{ github.workspace }}/snyk.json

      - name: Push the Docker images to registriesüíæ
        run: |
          docker tag ghcr.io/ammnt/nginx:${{ env.APP_VERSION }} ghcr.io/ammnt/nginx:latest
          docker tag ghcr.io/ammnt/nginx:${{ env.APP_VERSION }} ammnt/nginx:${{ env.APP_VERSION }}
          docker tag ghcr.io/ammnt/nginx:${{ env.APP_VERSION }} ammnt/nginx:latest
          docker push ghcr.io/ammnt/nginx --all-tags
          docker push ammnt/nginx --all-tags
          echo "DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ammnt/nginx:${{ env.APP_VERSION }} | sed -e "s|ammnt/nginx@||g")" >> $GITHUB_ENV

      - name: Attestation the Docker imageüìç
        uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ env.DIGEST }}
          push-to-registry: true
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign and check published Docker imagesüîê
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          cosign sign -y --recursive --key env://COSIGN_KEY ghcr.io/ammnt/nginx@${{ env.DIGEST }}
          cosign sign -y --recursive --key env://COSIGN_KEY ammnt/nginx@${{ env.DIGEST }}
          docker buildx imagetools inspect ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          docker buildx imagetools inspect ammnt/nginx:${{ env.APP_VERSION }}
          docker pull ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          docker pull ammnt/nginx:${{ env.APP_VERSION }}
          cosign verify --key cosign.pub ghcr.io/ammnt/nginx:${{ env.APP_VERSION }}
          cosign verify --key cosign.pub ammnt/nginx:${{ env.APP_VERSION }}
          docker system prune -f ; rm -rf ${{ github.workspace }}/*
